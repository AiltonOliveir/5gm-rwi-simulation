#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from Cheetah.compat import unicode

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '3.1.0'
__CHEETAH_versionTuple__ = (3, 1, 0, 'final', 1)
__CHEETAH_genTime__ = 1538168515.9114854
__CHEETAH_genTimestamp__ = 'Fri Sep 28 18:01:55 2018'
__CHEETAH_src__ = 'template_route.tmpl'
__CHEETAH_srcLastModified__ = 'Fri Sep 28 18:01:51 2018'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class template_route(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(template_route, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[0] # '$flow[0]' on line 2, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[0]')) # from line 2, col 21.
        write('''" color="0,0,1" begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 2, col 52
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 2, col 52.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 2, col 66
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 2, col 66.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[0] # '$probability[0]' on line 2, col 85
        if _v is not None: write(_filter(_v, rawExpr='$probability[0]')) # from line 2, col 85.
        write('''"  type="typeVehicleDistribution">
          <route edges="H1 H2"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[1] # '$flow[1]' on line 5, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[1]')) # from line 5, col 21.
        write('''" color="0,1,0"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 5, col 53
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 5, col 53.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 5, col 67
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 5, col 67.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[1] # '$probability[1]' on line 5, col 86
        if _v is not None: write(_filter(_v, rawExpr='$probability[1]')) # from line 5, col 86.
        write('''"  type="typeVehicleDistribution">
          <route edges="H1 V1 H9 H8"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[2] # '$flow[2]' on line 8, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[2]')) # from line 8, col 21.
        write('''" color="0,1,1"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 8, col 53
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 8, col 53.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 8, col 67
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 8, col 67.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[2] # '$probability[2]' on line 8, col 86
        if _v is not None: write(_filter(_v, rawExpr='$probability[2]')) # from line 8, col 86.
        write('''"  type="typeVehicleDistribution">
          <route edges="H1 V1 H7"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[3] # '$flow[3]' on line 11, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[3]')) # from line 11, col 21.
        write('''" color="1,0,0"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 11, col 53
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 11, col 53.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 11, col 67
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 11, col 67.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[3] # '$probability[3]' on line 11, col 86
        if _v is not None: write(_filter(_v, rawExpr='$probability[3]')) # from line 11, col 86.
        write('''"  type="typeVehicleDistribution">
          <route edges="H4 H3"/>
      </flow>     
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[4] # '$flow[4]' on line 14, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[4]')) # from line 14, col 21.
        write('''" color="1,0,1" begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 14, col 52
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 14, col 52.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 14, col 66
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 14, col 66.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[4] # '$probability[4]' on line 14, col 85
        if _v is not None: write(_filter(_v, rawExpr='$probability[4]')) # from line 14, col 85.
        write('''"  type="typeVehicleDistribution">
          <route edges="H4 V1 H9 H8"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[5] # '$flow[5]' on line 17, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[5]')) # from line 17, col 21.
        write('''" color="1,1,0"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 17, col 53
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 17, col 53.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 17, col 67
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 17, col 67.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[5] # '$probability[5]' on line 17, col 86
        if _v is not None: write(_filter(_v, rawExpr='$probability[5]')) # from line 17, col 86.
        write('''"  type="typeVehicleDistribution">
          <route edges="H4 V1 H7"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[6] # '$flow[6]' on line 20, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[6]')) # from line 20, col 21.
        write('''" color="1,1,1"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 20, col 53
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 20, col 53.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 20, col 67
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 20, col 67.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[6] # '$probability[6]' on line 20, col 86
        if _v is not None: write(_filter(_v, rawExpr='$probability[6]')) # from line 20, col 86.
        write('''"  type="typeVehicleDistribution">
          <route edges="H5 H6 H7"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[7] # '$flow[7]' on line 23, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[7]')) # from line 23, col 21.
        write('''" color="1,0.5,0"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 23, col 55
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 23, col 55.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 23, col 69
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 23, col 69.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[7] # '$probability[7]' on line 23, col 88
        if _v is not None: write(_filter(_v, rawExpr='$probability[7]')) # from line 23, col 88.
        write('''"  type="typeVehicleDistribution">
          <route edges="H5 H6 V2 H3"/>
      </flow> 
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[8] # '$flow[8]' on line 26, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[8]')) # from line 26, col 21.
        write('''" color="0.5,0,1" begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 26, col 54
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 26, col 54.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 26, col 68
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 26, col 68.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[8] # '$probability[8]' on line 26, col 87
        if _v is not None: write(_filter(_v, rawExpr='$probability[8]')) # from line 26, col 87.
        write('''"  type="typeVehicleDistribution">
          <route edges="H5 H6 V2 H2"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[9] # '$flow[9]' on line 29, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[9]')) # from line 29, col 21.
        write('''" color="0,1,0.5"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 29, col 55
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 29, col 55.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 29, col 69
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 29, col 69.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[9] # '$probability[9]' on line 29, col 88
        if _v is not None: write(_filter(_v, rawExpr='$probability[9]')) # from line 29, col 88.
        write('''"  type="typeVehicleDistribution">
          <route edges="H10 H9 H8"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[10] # '$flow[10]' on line 32, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[10]')) # from line 32, col 21.
        write('''" color="1,0.5,0.1"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 32, col 58
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 32, col 58.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 32, col 72
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 32, col 72.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[10] # '$probability[10]' on line 32, col 91
        if _v is not None: write(_filter(_v, rawExpr='$probability[10]')) # from line 32, col 91.
        write('''"  type="typeVehicleDistribution">
          <route edges="H10 V2 H2"/>
      </flow>    
      <flow id="flow''')
        _v = VFFSL(SL,"flow",True)[11] # '$flow[11]' on line 35, col 21
        if _v is not None: write(_filter(_v, rawExpr='$flow[11]')) # from line 35, col 21.
        write('''" color="1,0.5,1"  begin="''')
        _v = VFFSL(SL,"begin",True) # '$begin' on line 35, col 56
        if _v is not None: write(_filter(_v, rawExpr='$begin')) # from line 35, col 56.
        write('''" end= "''')
        _v = VFFSL(SL,"end",True) # '$end' on line 35, col 70
        if _v is not None: write(_filter(_v, rawExpr='$end')) # from line 35, col 70.
        write('''" probability="''')
        _v = VFFSL(SL,"probability",True)[11] # '$probability[11]' on line 35, col 89
        if _v is not None: write(_filter(_v, rawExpr='$probability[11]')) # from line 35, col 89.
        write('''"  type="typeVehicleDistribution">
          <route edges="H10 V2 H3"/>
      </flow>        
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_template_route = 'respond'

## END CLASS DEFINITION

if not hasattr(template_route, '_initCheetahAttributes'):
    templateAPIClass = getattr(template_route,
                               '_CHEETAH_templateClass',
                               Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(template_route)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://cheetahtemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=template_route()).run()


